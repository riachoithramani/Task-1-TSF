# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HCJhi5XtgNoyfYE4woy-e3zTgy7p2dW3

THE SPARKS FOUNDATION Task - 1 : Prediction using Supervised ML Predict the percentage of marks of an student based on the number of study hours.

Name: Ria Choithramani 

STEP 1 - Importing libraries and dataset
"""

#Importing required librabries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Reading data from the given link 
df = pd.read_csv("https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv")

df.head()

"""STEP 2- Visualizing the data"""

df.plot(x='Hours', y='Scores', style='.', color='blue')
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.grid()
plt.show()

df.describe()

"""STEP 3 - Preparing the data & Splitting the dataset"""

X = df.iloc[:, :-1].values  
X

y = df.iloc[:, 1:].values  
y

# Splitting data into training data and testing data
from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.2, random_state=0)

"""STEP 4 - Training the Algorithm We have splited our data into training and testing sets, and now we will train our model."""

from sklearn.linear_model import LinearRegression  

l = LinearRegression()  
l.fit(X_train, y_train)

# print coefficient and intercepts model
l.coef_

l.intercept_

"""STEP 5 - Visualizing the model"""

# Plotting the regression line
line = l.coef_*X+l.intercept_

# Plotting for the test data
plt.show()
plt.scatter(X_train, y_train, color='black')
plt.plot(X, line, color='blue');
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score') 
plt.grid()
plt.show()

"""STEP 6 - Making Predictions Now that we have trained our algorithm, it's time to make some predictions."""

print(X_test)
y_pred = l.predict(X_test) # Predicting the scores

#Comparing actual and predicated values of a dataframes
comp = pd.DataFrame({ 'Actual':[y_test],'Predicted':[y_pred] })
comp

#Testing 
hours = 9.25
own_pred = l.predict([[hours]])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

"""STEP 7 - Evaluating the model The final step is to evaluate the performance of algorithm. This step is particularly important to compare how well different algorithms perform on a particular dataset. For simplicity here, we have chosen the mean square error. There are many such metrics."""

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))